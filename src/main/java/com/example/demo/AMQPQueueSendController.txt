package com.example.demo;


import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.jms.JmsException;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import javax.jms.*;
import javax.naming.Context;
import javax.naming.InitialContext;
import java.util.Hashtable;

import javax.naming.NamingException;


import com.azure.core.amqp.implementation.ConnectionStringProperties;

@RestController
public class SendControllerAMQP  {

    

    private static final Logger logger = LoggerFactory.getLogger(SendControllerAMQP.class);
    private static final String connectionString ="Endpoint=sb://rsgservicebus.servicebus.windows.net/;SharedAccessKeyName=RootManageSharedAccessKey;SharedAccessKey=vPDqlGqjO5Ofsq4Crifjexp4uBti6XsHtWtCSuOH4PY=";


    @PostMapping("/messagesAMQP")
    public String postMessage(@RequestParam String message) throws JMSException {
        logger.info("Sending message");
        

        ConnectionStringProperties csb = new ConnectionStringProperties(connectionString);
        
        // Set up JNDI context
        Hashtable<String, String> hashtable = new Hashtable<>();
        hashtable.put("connectionfactory.SBCF", "amqps://" + csb.getEndpoint().getHost() + "?amqp.idleTimeout=120000&amqp.traceFrames=true");
        hashtable.put("queue.QUEUE", "niel");
        hashtable.put(Context.INITIAL_CONTEXT_FACTORY, "org.apache.qpid.jms.jndi.JmsInitialContextFactory");
        try {
            Context context = new InitialContext(hashtable);
            ConnectionFactory cf = (ConnectionFactory) context.lookup("SBCF");
            Destination queue = (Destination) context.lookup("QUEUE");
            if (queue != null) {
                logger.info("we are good ...");
                // We create a scope here so we can use the same set of local variables cleanly 
                // again to show the receive side separately with minimal clutter.
                try {
                    // Create connection
                    Connection connection = cf.createConnection(csb.getSharedAccessKeyName(), csb.getSharedAccessKey());
                    // Create session, no transaction, client ack
                    Session session = connection.createSession(false, Session.CLIENT_ACKNOWLEDGE);

                    // Create producer
                    MessageProducer producer = session.createProducer(queue);
                    int totalSend=1;
                    // Send message
                    
                    for (int i = 0; i < totalSend; i++) {
                        //javax.jms.Message bmessage =  session.createTextMessage("name:" + message);
                        javax.jms.Message bmessage =  session.createObjectMessage(new User(message));
                        producer.send(bmessage);
                        System.out.printf("Sent message %d.\n", i + 1);
                    }
                    producer.close();
                    session.close();
                    connection.stop();
                    connection.close();
                } catch (JmsException je) {
                    logger.error("JMS Exception=" + je.getStackTrace());
                }
            } else {
                logger.error("Queue lookup is null");
            }
        }
        catch (NamingException ne) {
            logger.error("Naming excveption ne=" + ne.getStackTrace());
        }
        
        // Look up queue
        return message;
    }


}